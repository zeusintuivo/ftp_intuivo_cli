#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
THISSCRIPTNAME=`basename "$0"`

if [[ -z "$1"  ]] && [[ "$1" == "-?" || "$1" == "-h" || "$1" == "--h" || "$1" == "-help" || "$1" == "--help" ]] ; then   # empty value
  echo "

From one folder to a live HOST using batch LISTING in subfolders, with curl 

${THISSCRIPTNAME} 
  "
    exit 0
fi

if ! command -v wget >/dev/null 2>&1; then
	echo '1'
    echo "wget not found. please install"
    exit 69
fi
if ! command -v rsync >/dev/null 2>&1; then
    echo "rsync not found. please install"
    exit 69
fi
if ! command -v find >/dev/null 2>&1; then
    echo "find not found. please install"
    exit 69
fi
if ! command -v sed >/dev/null 2>&1; then
    echo "sed not found. please install"
    exit 69
fi
if ! command -v curl >/dev/null 2>&1; then
	echo '5'
    echo "curl not found. please install"
    exit 69
fi
if ! command -v ag >/dev/null 2>&1; then
	echo '6'
    echo "ag not found. please install"
    exit 69
fi

load_execute_command_wget(){
    local provider="/Users/benutzer/_/clis/execute_command_intuivo_cli/execute_command"
    [   -e "${provider}"  ] && source "${provider}"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/execute_command -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v type passed >/dev/null 2>&1; ) && echo -e "\\n \\n  ERROR! Loading execute_command \\n \\n " && exit 69; )
} # end load_execute_command_wget
load_execute_command_wget

load_struct_testing_wget(){
    local provider="/Users/benutzer/_/clis/execute_command_intuivo_cli/struct_testing"
    [   -e "${provider}"  ] && source "${provider}"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v type passed >/dev/null 2>&1; ) && echo -e "\\n \\n  ERROR! Loading struct_testing \\n \\n " && exit 69; )
} # end load_struct_testing_wget
load_struct_testing_wget

if ! command -v anounce >/dev/null 2>&1; then
    echo '6.5'
    echo "anounce not found. Check Your internet connection"
    exit 69
fi

it_looks_like_a_filename(){
    local try_exists="""${1}"""
    # Sample Use:
    # if ( it_looks_like_a_filename "${try_FILENAME}"  ) ; then
    #    {
    #        (( DEBUG_VERB_READING_LOGIC )) && echo "              it_looks_like_a_filename"
    #    }
    # fi
    #local file_was_listed_as_deleted=$(file_was_deleted "${try_exists}")
    #(( DEBUG_VERB_READING_LOGIC )) && ( file_was_deleted "${try_exists}" ) && echo " file_was_listed_as_deleted ${try_exists}"
    #(( DEBUG_VERB_READING_LOGIC )) && echo "                +-- it_looks_like_a_filename is trying $try_exists "
    if  [[ ! -z "${try_exists}" ]] ; then
    {
        if [[ -f "${try_exists}" || -d "${try_exists}/" ]] ; then
        {
            return 1
        }
        else
        {
	        return 0
        }
        fi
    }
    else
    {
        return 1
    }
    fi
} # end it_looks_like_a_filename

function trim_start_space() {
	sed -e 's/^[[:space:]]*//' | sed 's/^\ //g' | sed 's/^\t//g'
}

function remove_system_dots() {
	sed 's/^\../  /g'
}


function remove_last_slash {
    sed 's/\/$//g'  # remove last slash
}


function slashes_to_newlines {
	(
	  if [[ "$(uname)" == "Darwin" ]] ; then
	    # Do something under Mac OS X platform
	    sed -e 's/'"\/"'/\'$'\n/g' #BSD-way 'Mac' splits slashed into enters with newlines divides slashes
	  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]] ; then
	    # Do something under GNU/Linux platform
	    sed -e 's/'"\/"'/'"\n"'/g' #Linux way splits slashed into enters with newlines divides slashes
	  elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ; then
	    # Do something under Windows NT platform
	    sed -e 's/'"\/"'/'"\n"'/g' #Windows way -Not implemented, Windows-GNU splits slashed into enters with newlines divides slashes
	  fi
	)
}

# TEST: echo "/_/work/savedo/projects/savedo-cms-wagon-de/app/assets/fonts/bootstrap/" | slashes_to_newlines
# EXPECTATION:
# _
# work
# savedo
# projects
# savedo-cms-wagon-de
# app
# assets
# fonts
# bootstrap
#
function remove_double_slashes { #removes double slashes in path and converts ./ to PWD
    # usage
    #        1. FOLDER=$(remove_double_slashes ".//_/work/savedo/projects/savedo-cms-wagon-de///app/assets///fonts/bootstrap///")
    #        2. remove_double_slashes ".//_/work/savedo/projects/savedo-cms-wagon-de///app/assets///fonts/bootstrap///"
    local incoming_string="${@}"
    local PARTS=$(slashes_to_newlines <<< "${incoming_string}")
    local ONE_PART
    local result=""
    local COUNTER=0
    local using_string=""
    while read -r ONE_PART; do
    # for ONE_PART in ${PARTS}; do
    {
        if [ ! -z "${ONE_PART}" ] ; then # if not empty
        {
            using_string="${ONE_PART}"
            if [ $COUNTER -eq 0 ] && ( [ "${using_string}" == "." ] || [ -d "${using_string}" ] ) ; then
            {
                result="$(pwd)"
                [ -d "${using_string}" ] && result="$(pwd)/${using_string}"
            } else {
                if [ $COUNTER -eq 0 ] ; then
                {
                    result="${using_string}"
                    [ -d "${using_string}" ] && [[ ${incoming_string:0:1} != "/" ]] && result="$(pwd)/${using_string}"
                } else {
                    result="${result}/${using_string}"
                }
                fi

            }
            fi
            (( COUNTER++ ))
        }
        fi
    }
    done <<< "${PARTS}"
    if [[ ${incoming_string:0:1} == "/" ]] ; then # get first char from string
    {
       [[ ${result:0:1} != "/" ]] && result="/${result}"
    }
    fi
    echo "${result}"
    return 0
}
# TEST: remove_double_slashes "/_/work/savedo/projects/savedo-cms-wagon-de///app/assets///fonts/bootstrap///"
# EXPECTATION: /_/work/savedo/projects/savedo-cms-wagon-de/app/assets/fonts/bootstrap

# TEST: remove_double_slashes "./work/savedo/projects/savedo-cms-wagon-de///app/assets///fonts/bootstrap///"
# EXPECTATION: ${PWD}/work/savedo/projects/savedo-cms-wagon-de/app/assets/fonts/bootstrap



if [ ! -e "./.temp_keys" ]; then
	echo '7'
    echo "Error: Missing ./.temp_keys file with Settings"
	exit 69
fi

. ./.temp_keys


anounce ftp://$FTP_USER:$FTP_PASS@$FTP_HOST$FOLDER_TARGET

if [  -z "${FTP_USER}" ]; then
    echo '8'
    echo "Error: FTP User Not found: ${FTP_USER}"
    exit 69
fi
if [  -z "${FTP_PASS}" ]; then
    echo '9'
    echo "Error: FTP Password Not found: ${FTP_PASS}"
    exit 6
fi
if [  -z "${FTP_HOST}" ]; then
    echo '10'
    echo "Error: FTP host Not found: ${FTP_HOST}"
    exit 69
fi
if [  -z "${TARGETS_TO_DESTINATIONS}" ]; then
    echo '11'
    echo "Error: TARGETS_TO_DESTINATIONS host Not found: ${TARGETS_TO_DESTINATIONS}"
    exit 69
fi
if [  -z "${FOLDER_TARGET}" ]; then
    echo '12'
    echo "Error: FOLDER_TARGET Not found: ${FOLDER_TARGET}"
    exit 69
fi
#if [  -z "${REMOVE_SOURCEMAPS}" ]; then
#    echo '13'
#    echo "Error: REMOVE_SOURCEMAPS Not found: ${REMOVE_SOURCEMAPS}"
#    exit 69
#fi
if [  -z "${FTP_TLS}" ]; then
    echo '14'
    echo "Error: FTP_TLS key Not found: ${FTP_TLS}"
    exit 69
fi
if [  -z "${FTP_PORT}" ]; then
    echo '14'
    echo "Error: FTP_PORT key Not found: ${FTP_PORT}"
    exit 69
fi




function remove_sourcemaps() {

    while read -r one_target_file_to_remove_sourcemaps_line; do
                        {
        if [ ! -z "${one_target_file_to_remove_sourcemaps_line}" ] ; then  # if not empty
        {

            sed -ie '/sourceMappingURL/d' "${one_target_file_to_remove_sourcemaps_line}"
            if [ $? -gt 0 ] ; then
            {
                echo "Error executing: sed -ie '/sourceMappingURL/d' ${one_target_file_to_remove_sourcemaps_line}"
            }
            fi
            rm "${one_target_file_to_remove_sourcemaps_line}e"
                    if [ $? -gt 0 ] ; then
            {
                echo "Error executing: rm ${one_target_file_to_remove_sourcemaps_line}e"
            }
            fi

        }
        fi
    }
    done <<< "${@}"

} #end remove_sourcemaps()

remove_sourcemaps "${REMOVE_SOURCEMAPS}"

function copy_using_curl() {
    local FROMPATH="${1}"
    local TOPATH="${2}"
    local filename just_file_name COPY_FROM one_file all_files COPY_FROM_corrected TOPATH_corrected
    anounce Copy Batch
    all_files=$(find "$FROMPATH" -maxdepth 1 | sed s"$FROMPATH"/g | sed 's/\.\///g' | sed '/^\.$/d' )
    #anounce  Found:"${all_files}"
    #exit
    while read -r one_file; do
    {
        if [ ! -z "${one_file}" ] && [[ "${FROMPATH}/${one_file}" != "${FROMPATH}/${FROMPATH}" ]]; then
        {
            filename=$(escape_filename <<< "${one_file}")
            [ -d "${FROMPATH}/${filename}/" ] && mkdir -p "${TOPATH}/${filename}"
            anounce "${filename}"
            just_file_name=$(echo $(basename "${filename}"))
            if [ -e "${filename}" ] && [ ! -e "${FROMPATH}/${filename}" ]; then
            {
                COPY_FROM="${filename}"
            }
            elif [ ! -e "${filename}" ] && [ -e "${FROMPATH}/${filename}" ]; then
            {
                COPY_FROM="${FROMPATH}/${filename}"
            }
            fi
            COPY_FROM_corrected=$(remove_double_slashes "${COPY_FROM}")
            # DEBUG echo "${COPY_FROM}"
            # DEBUG echo "${COPY_FROM_corrected}"
            TOPATH_corrected=$(remove_double_slashes "${TOPATH}")
            # DEBUG echo "${TOPATH}"
            # DEBUG echo "${TOPATH_corrected}"
            anounce_command rsync -av "${COPY_FROM_corrected}" "${TOPATH_corrected}/"
        }
        fi
    }
    done <<< "${all_files}"
} #end copy_using_curl()


function ftp_using_curl() {
        anounce Showing listing
        anounce_command curl -k -sSu $FTP_USER:$FTP_PASS  ftp://${FTP_HOST}:${FTP_PORT}${FOLDER_TARGET}${FOLDER_TARGET}
                if [ $? -gt 0 ] ; then
                {
                    fail "Error executing: showing ftp directory"
                }
                fi

        action="anounce_command  curl -sSu $FTP_USER:$FTP_PASS -T \${source} ftp://${FTP_HOST}:${FTP_PORT}${FOLDER_TARGET}\${target}"

        while read -r source_one_target; do
                            {
            if [ ! -z "${source_one_target}" ] ; then  # if not empty
            {

IFS=\> read source target <<EOF
${source_one_target}
EOF
                # replace value inside string substitution expresion bash
                eval """${action}"""
                if [ $? -gt 0 ] ; then
                {
                    echo "Error executing: ${action}"
                }
                fi
            }
            fi
        }
        done <<< "${@}"
        
} #end ftp_using_curl



function ftps_using_lftp() {
 if ! command -v lftp >/dev/null 2>&1; then
        {
            echo '15'
            echo "lftp not found. please install"
            brew install lftp
            exit 69
        }
        fi

        anounce_command curl -k -sSu $FTP_USER:$FTP_PASS --ftp-ssl ftp://${FTP_HOST}:${FTP_PORT}${FOLDER_TARGET}
                if [ $? -gt 0 ] ; then
                {
                    fail "Error executing: showing ftp directory"
                }
                fi

        while read -r source_one_target; do
        {
            if [ ! -z "${source_one_target}" ] ; then  # if not empty
            {
                
IFS=\> read source target <<EOF
${source_one_target}
EOF
        # REF: https://www.unix.com/shell-programming-and-scripting/227823-ssh-shell-script-access-ftp-over-explicit-tls-ssl.html
        anounce_command  "lftp -u ${FTP_USER},${FTP_PASS} ftp://${FTP_HOST}:${FTP_PORT} <<EOF
                set ftp:ssl-force true
                set ftp:ssl-protect-data true
                mput ${source}
                exit
                EOF"
                if [ $? -gt 0 ] ; then
                {
                    echo "Error executing: lftp ${source} upload to server"
                }
                fi
            }
            fi
        }
        done <<< "${@}"
} #end ftps_using_lftp()

function ftps_one_file_using_curl() {        
    # REF: https://stackoverflow.com/questions/14019890/uploading-all-of-files-in-my-local-directory-with-curl
    #    curl -u xxx:psw --ftp-create-dirs -T {} ftp://192.168.1.158/public/demon_test/{} \;
    #    curl -sSu $USER:$PASS --ftp-create-dirs -T app/Billing/Stripe.php --ftp-ssl $HOST/app/Billing/Stripe.php
    #    curl -sSu ${FTP_USER}:${FTP_PASS} --ftp-create-dirs -T "${filename}" --ftp-ssl "ftp://${FTP_HOST}:${FTP_PORT}${target_filename}"
    # globals ${FTP_USER} ${FTP_PASS} {FTP_HOST} ${FTP_PORT} ${FOLDER_TARGET}
    local source="${1}"
    local target="${2}"
    #echo "ftps_one_file_using_curl (${source} to ${target} )"
    #exit 69
    anounce_command curl -sSu ${FTP_USER}:${FTP_PASS} --ftp-create-dirs -T "${source}" --ftp-ssl "ftp://${FTP_HOST}:${FTP_PORT}${target}"
                if [ $? -gt 0 ] ; then
                {
                    echo "Error executing: curl ${source} upload to server ftp://${FTP_HOST}:${FTP_PORT}${target}  Source:<${source}> Target:<${target}>"
                    exit 69;
                }
                fi
                #exit 69
} #end ftps_one_file_using_curl()

function ftps_directoy_using_curl(){
    local source="${1}"
    local target="${2}"
    local all_files one_file base_folder one_item one_target one_cleaned local_dir
    #echo "ftps_directoy_using_curl (${@})" 
    if [ -f "${source}" ] ; then
    {
        # file
        #echo "does not look like file ${source}"
        ftps_one_file_using_curl "${source}" "${target}"
    }
    else 
    {
        #echo "directory ${source}"
        # directory
        base_folder="${source}"
        all_files=$(find "${source}" -maxdepth 1 | sed s@"${source}"@@g | sed 's/\.\///g' | sed '/^\.$/d' | sed '/.DS_Store$/d' )
        #echo "all_files ${all_files}"
        while read -r one_file; do
        {
            if [ ! -z "${one_file}" ] ; then
            {
                one_item=$(remove_double_slashes "/${base_folder}/${one_file}")
                local_dir=$(pwd)
                one_cleaned=$(echo "${one_item}" | sed s@"${local_dir}"@@g )
                one_target="${one_cleaned}"
                #echo "$one_item"
                if [ -f "${one_item}"  ] ; then
                {
                    #echo "second try file ${one_item} /// ${one_target}" 
                #exit 69
                    # file
                    ftps_one_file_using_curl "${one_item}" "${one_target}"
                }
                else 
                {
                    #echo "second try directory ${one_item} /// ${one_target}" 
#exit 69
                    # directory
                    ftps_directoy_using_curl "${one_item}" "${one_target}"
                }
                fi
            }
            fi
        }
        done <<< "${all_files}"
    }
    fi
} #end ftps_directoy_using_curl()

function ftps_using_curl() {
    local source_one_target   one_file   all_files source target 
    #echo "${@}" 
    while read -r source_one_target; do
    {
            if [ ! -z "${source_one_target}" ] ; then  # if not empty
            {
                
IFS=\> read source target <<EOF
${source_one_target}
EOF
        #echo "one ${source} to $target"  
                if [ ! -z "${source}" ] && [ -e "${source}" ] ; then
                {
                    ftps_directoy_using_curl "${source}" "${target}"
                }
                fi
            }
            fi
    }
    done <<< "${@}"
} #end ftps_using_curl()



anounce ftp://$FTP_USER:$FTP_PASS@$FTP_HOST$FOLDER_TARGET
#echo "${FTP_TLS}" "${TARGETS_TO_DESTINATIONS}" 

if [[ "${FTP_TLS}" == *"YES"* ]] || [[ "${FTP_TLS}" == *"yes"* ]]; then 
{
#    echo "TLS"
    # NOT FULLY WORKING: ftps_using_lftp "${TARGETS_TO_DESTINATIONS}"   
    ftps_using_curl "${TARGETS_TO_DESTINATIONS}"    

}
else 
{
#    echo "PLAIN"
    ftp_using_curl "${TARGETS_TO_DESTINATIONS}"    
}
fi




